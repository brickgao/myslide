<!--
    Powered By nodePPT
    version: 0.6.1
    site: https://github.com/ksky521/nodePPT
-->
<!doctype html>
<html>
<head>
    <meta charset="UTF-8">
    <title>中间人攻击 - By Brickgao</title>
    <link rel="stylesheet" media="all" href="/css/nodeppt.css">
    <link rel="stylesheet" media="only screen and (max-device-width: 480px)" href="/css/phone.css">
    <link rel="stylesheet" href="/js/highlight/monokai.css">
</head>
<body>

<slides id="container">
    <slide class="slide"><article class="flexbox vcenter">
<h1>中间人攻击</h1>
<h2>Man-in-the-Middle Attack</h2>

</article></slide>
<slide class="slide"><hgroup>
<h2>什么是中间人攻击？</h2>

</hgroup><article class="flexbox vcenter">


<p><img src="/img/hack.png" alt=""></p>
<h3>简单点来说中间人攻击就是网络你和网络之间的第三人，攻击者充当了 client 和 server 之间的转发者，作为转发者他可以修改通信中的内容，而 client 和 server 不会知道中间有转发者，双方均认为是与对方直接通信。</h3>

</article></slide>
<slide class="slide"><article>
<h2>我们举一个加密通信中的栗子</h2>
<ul>
<li><p>alice == &quot;嗨，Bob，我是Alice。给我你的公钥&quot; ==&gt; Mallory                  Bob</p>
</li>
<li><p>alice                  Mallory == &quot;嗨，Bob，我是Alice。给我你的公钥&quot; ==&gt; Bob</p>
</li>
<li><p>alice                                       Mallory &lt;== [ Bob 的公钥] == Bob</p>
</li>
<li><p>alice &lt;== [ Mallory 的公钥] == Mallory                                   Bob</p>
</li>
<li><p>alice == &quot;我们在公共汽车站见面！&quot; [使用 Mallory 的公钥加密] ==&gt; Mallory  Bob</p>
</li>
<li><p>alice                  Mallory == &quot;在家等我！&quot; [使用 Bob 的公钥加密] ==&gt; Bob</p>
</li>
</ul>
<p>这种情况下， Bob 认为信息是直接从 Alice 哪里传过来的。</p>

</article></slide>
<slide class="slide"><hgroup>
<h2>如何进行中间人攻击？</h2>

</hgroup><article>

<p>我们以 Ettercap 为例子进行攻击</p>
<p>Ettercap 是一个局域网中间人攻击的工具</p>
<p>我们可以在 <a href="https://github.com/Ettercap/ettercap/">https://github.com/Ettercap/ettercap/</a> 得到它的源码，编译后安装</p>
<p>也可以直接获取它的软件包，例如在 ubuntu 下输入</p>
<pre><code class="bash">     sudo apt-get install ettercap-graphical</code></pre>

</article></slide>
<slide class="slide"><article class="flexbox vcenter">

<p><img src="/img/mitm.png" alt=""></p>

</article></slide>
<slide class="slide"><hgroup>
<h2>dns 欺诈攻击</h2>

</hgroup><article>

<p>我们先修改 etter.dns 中的规则：</p>
<pre><code class="bash">     *.com   A   202.114.64.60</code></pre>
<p>修改完成后在图形界面中载入插件，选择目标，开启 arp 攻击，然后进行欺诈。</p>
<p>也可以直接在 bash 里完成：</p>
<pre><code class="bash">     root@pc:~# ettercap -T -q -i eth0 -P dns_spoof // //</code></pre>
<p>这样的话，我们只要访问<code>*.com</code>的站点都会重定向至 <a href="http://my.whu.edu.cn">http://my.whu.edu.cn</a></p>

</article></slide>
<slide class="slide"><hgroup>
<h2>对 ssl 的攻击</h2>

</hgroup><article class="flexbox vcenter">

<p>基本上对 ssl 的攻击是不大行的通的，主要是因为如果你对 ssl 通信进行攻击，那么因为 PKI 的因素，我们会在浏览器上看到这个：</p>

<p><img src="/img/github-attack.png" alt=""></p>

</article></slide>
<slide class="slide"><hgroup>
<h2>对 ssl 的攻击</h2>

</hgroup><article>

<p>这里我们提供一个思路，通过<code>sslstrip</code>将所有的 https 连接重置为 http 连接，这样我们可以通过监听广播来过滤用户名和密码。</p>
<p>你可以在 <a href="https://github.com/moxie0/sslstrip">https://github.com/moxie0/sslstrip</a> 上获取源码，或者直接获取软件包，例如在 ubuntu 获取<code>sslstrip</code>：</p>
<pre><code class="bash">      sudo apt-get install sslstrip</code></pre>
<p>具体可以参考 <a href="http://www.freebuf.com/articles/web/5929.html">http://www.freebuf.com/articles/web/5929.html</a></p>

</article></slide>
<slide class="slide"><hgroup>
<h2>获取 cookie</h2>

</hgroup><article class="flexbox vcenter">

<p>开启中间人攻击选项，监听连接，寻找目标网站，并截取 cookie，最后用 Tamper Data 或其他工具修改 cookie，就可以实现成功的登录。</p>

<p><img src="/img/get_cookie.png" alt=""></p>

</article></slide>
    <slide class="slide thank-you-slide segue nobackground">
        <article class="flexbox vleft auto-fadein">
            <h2>Q &amp; A</h2>
            <h3>&lt;Thank You!&gt;</h3>
        </article>
    </slide>
    <slide class="slide logoslide dark nobackground">
        <article class="flexbox vcenter">
          <h2 style="color: white;">Powered By nodePPT v0.6.1</h2>
        </article>
      </slide>
    <div class="slideTip" id="tip"></div>
</slides>
<canvas id="drawBoard" class="draw-board" width="900" height="700"></canvas>
<div class="progress"><span id="progress"></span></div>
<script src="/js/mixjs/lib/mix.0.3.0.min.js"></script>
<script>
var base = location.protocol + '//' + location.host + '/';
MixJS.config({
    baseURL:base + 'js/'
});
MixJS.use('event/broadcast', function($){
    $.loadJS('/js/nodeppt.js',function(){
        Slide.init({
            containerID: 'container',
            drawBoardID: 'drawBoard',
            slideClass: '.slide',
            buildClass: '.build',
            progressID: 'progress',
            transition: 'cards',
            tipID: 'tip',
            width: 1100,
            dir: '/js/',
            // control:{
            //     type: 'socket',
            //     args:{
            //         isControl: location.hash.slice(1,8) === 'control',
            //         host: base,
            //         //摇一摇
            //         shake: true
            //     }
            // }
            //打开下面的注释就开启postMessage方式
            //访问网址127.0.0.1:8080/ppt/demo#client
            control:{
                type: 'postMessage'
            }
        });
    }).loadJS('/js/highlight/highlight.pack.js',function(){

        hljs.tabReplace = '  ';
        hljs.initHighlightingOnLoad();
    });
});
</script>
<script src="/js/demo.js"></script>
<link rel="stylesheet" href="/css/demo.css">
</body>
</html>
